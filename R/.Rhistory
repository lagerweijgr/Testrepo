cumsum%>%
rowSums(na.rm= T)%>%
sign);
return(new.series)
}
#recode
rule.sinceany.recode <- function(timeseries,
var.id,
codesposnegmiss,
newcodes=c(1,0,0)){
#' @title Rule since first positive of any sample using recoding
#' @description
#' All samples of a host are considered positive after the first positive sample from multiple assays per time point
#'
#' @param timeseries
#' @param var.id
#' @param ...
#' @inherit rule.generic param, return, examples, references
#' @return
if(length(var.id)>1) warning("Only first var.id entry used in rule")
#recode data
timeseries[,var.id]<- timeseries[,var.id[1]]%>%
sapply(recodefunction,codesposnegmiss=codesposnegmiss,newcodes=newcodes)
return(rule.sinceany(timeseries,var.id))
}
#recode using a cutoff
rule.sinceany.cutoff <-function(timeseries,var.id,cutoff){
#' @title Rule since first positive of any sample using cutoff
#' @description
#' All samples of a host are considered positive after the first positive sample from multiple assays per time point
#'
#' @param timeseries
#' @param var.id
#' @param ...
#' @inherit rule.generic param, return, examples, references
#' @return
timeseries[,var.id]<- timeseries[,var.id[1]]%>%
sapply(cutofffunction,co = cutoff) %>% as.numeric(var.id)
return(rule.sinceany(timeseries, var.id))
}
#use a detection limit
rule.sinceany.detectionLimit <-function(timeseries,var.id,cutoff =0){
#' @title Rule since first positive of any sample using d=cutoff and detection limit
#' @description
#' All samples of a host are considered positive after the first positive sample from multiple assays per time point
#'
#' @param timeseries
#' @param var.id
#' @param ...
#' @inherit rule.generic param, return, examples, references
#' @return
timeseries[,var.id]<- timeseries[,c(var.id[1],"detectionLimit")]%>%
apply(detectionLimitfunction,1,co = cutoff) %>% as.numeric(var.id)
return(rule.sinceany(timeseries, var.id))
}
##rule using all sample (all should be positive) in the data and determine status S or I####
rule.all <- function(timeseries,var.id){
#' @title Rule for multiple samples and all need to be positive
#' @description
#' All samples of a host are considered infectious if all assays per time point are positive
#'
#' @param timeseries
#' @param var.id
#' @param ...
#' @inherit rule.generic param, return, examples, references
#' @return
new.series <- 2*(timeseries%>%
select(all_of(var.id))%>%
rowMins() );
return(new.series)
}
##rule using some samples to determine status  I and other for R####
# Animals can switch between susceptible, infectious, recovered and back
rule.testinfectioustestrecovered <- function(timeseries,var.id,infrec){
#' @title Rule for multiple samples in which one determines infection and one recovery
#' @description
#' A host is considered infectious if the variables indicating infectiousness are positive and recovered if the variable indicating recovery is positive
#'
#' @param timeseries
#' @param var.id
#' @param infrec data.frame containing names of variables that indicate infectiousness (infrec$inf) or recovery (infrec$rec)
#' @param ...
#' @inherit rule.generic param, return, examples, references
#' @return
i <- 2*(timeseries%>%
select(all_of(var.id[infrec$inf]))%>%
rowSums%>%
sign);
r <- 3*(timeseries%>%
select(all_of(var.id[infrec$rec]))%>%
rowSums%>%
sign);
new.series <- rowMaxs(data.frame(i,r))
return(new.series)
}
#
rule.sincefirstinfectioustestrecovered <- function(timeseries,var.id,infrec){
#' @title Rule for multiple samples in which one determines infection and one recovery
#' @description
#' A host is considered infectious from the first time a variable indicating infectiousness are positive and recovered from the first time a variable indicating recovery is positive
#'
#' @param timeseries
#' @param var.id
#' @param infrec data.frame containing names of variables that indicate infectiousness (infrec$inf) or recovery (infrec$rec)
#' @param ...
#' @inherit rule.generic param, return, examples, references
#' @return
i <- 2*(timeseries%>%
select(all_of(var.id[infrec$inf]))%>%
unlist%>%
cumsum%>%
rowSums%>%
sign);
r <- 3*(timeseries%>%
select(all_of(var.id[infrec$rec]))%>%
unlist%>%
cumsum%>%
rowSums%>%
sign);
new.series <- rowMaxs(data.frame(i,r))
return(new.series)
}
##rule uses any sample which requires to be positive for at least n consecutive time moments
#If only the last sample is positive it will  be considered positive
rule.consecutive <- function(timeseries,var.id,n)
{
#' @title Rule with minimum number of positive samples
#' @description
#' A host is considered infectious if it has had n days consecutive positive samples.
#'
#' @param timeseries
#' @param var.id
#' @param n number of days a host needs to have positive samples
#' @param ...
#' @inherit rule.generic param, return, examples, references
#' @return
new.series <- timeseries%>%
select(all_of(var.id))%>%
rowSums()%>%
sign();
return(sapply(X = c(1:length(new.series)),
FUN = function(x){min(new.series[x:(min(length(new.series),x+n))])}))
}
##rule using any sample in the data and determine status S or I####
# Animals can switch between susceptible and infectious and back
rule.any <- function(timeseries,var.id){
#' @title Rule any of multiple samples
#' @description
#' A host is considered infectious if any of multiple samples is positive.
#'
#' @param timeseries
#' @param var.id
#' @param ...
#' @inherit rule.generic param, return, examples, references
#' @return
new.series <- 2*as.numeric(timeseries%>%
select(all_of(var.id))%>%
rowSums%>%
sign)
return(new.series)
}
##Samples have another way to mark positive or negative
rule.sinceany.recode<- function(timeseries,
var.id,
codesposnegmiss,
newcodes=c(1,0,0),
... )
{
#' @title Rule since any of multiple samples with recoding
#' @description
#' A host is considered infectious since first of any of multiple samples is positive.
#'
#' @param timeseries
#' @param var.id
#' @param codesposnegmiss
#' @param newcodes
#' @param ...
#' @inherit rule.generic param, return, examples, references
#' @return
if(length(codesposnegmiss)>3){
stop("too many recodings for this rule!")}
recodefunction <- function(input){
ifelse(str_detect(pattern = paste0("[",codesposnegmiss[1],"]"),string = input),newcodes[1],
ifelse(str_detect(pattern=paste0("[",codesposnegmiss[2],"]"),string = input),newcodes[2],
ifelse(str_detect(pattern=paste0("[",codesposnegmiss[3],"]"),string = input),newcodes[3],NA)))}
timeseries[,var.id]<- timeseries%>%
select(all_of(var.id))%>%
sapply(recodefunction)
return(rule.sinceany(timeseries, var.id))
}
##Measurements
##If pos / neg is indicated by a cutoff
rule.sinceany.cutoff<- function(timeseries, var.id,cutoff )
{
#' @title Rule since any of multiple samples with cutoff
#' @description
#' A host is considered infectious since first of any of multiple samples is positive.
#'
#' @param timeseries
#' @param var.id
#' @param cutoff
#' @param ...
#' @inherit rule.generic param, return, examples, references
#' @return
recodefunction <- function(input){
as.numeric(input)> cutoff
}
timeseries[,var.id]<- timeseries%>%
select(all_of(var.id))%>%
sapply(recodefunction) %>% as.numeric(var.id)
return(rule.sinceany(timeseries, var.id))
}
#if pos / neg is indicated by a cutoff and a detection limit.
#Measures with a value of the detection limit are defined positive if above detection limit (">") and negative if below detection limit ("<")
rule.sinceany.detectionLimit <- function(timeseries, var.id,  ...)
{
#' @title Rule since any of multiple samples with detection limit
#' @description
#' A host is considered infectious since first of any of multiple samples is positive based on detection limit for that variable
#'
#' @param timeseries
#' @param var.id
#' @param ...
#' @inherit rule.generic param, return, examples, references
#' @return
#determine cutoff
num.val <- as.numeric(as.numeric(timeseries[,"sample_measure"])>cutoff);
dl <- sapply(timeseries[,"detectionLimit"],grepl,pattern = "<")
du <-sapply(timeseries[,"detectionLimit"],grepl,pattern = ">")
timeseries[,"detectionLimit"]<- num.val;
#replace below detection limit with a 0 if measured
timeseries[dl,"detectionLimit"] <- 0;
#replace above detection limit with a 1 if measured
timeseries[du,"detectionLimit"] <- 1;
#select those that  have a value or are above detection limit.
timeseries[,"sample_measure"]<- num.val;
return(rule.sinceany(timeseries, var.id))
}
13.5/(87.5*87.5)
13.5/(0.875*0.875)
13.5/(0.865*0.865)
log <- readLog("U:/BEAST_new_round/LogFiles_OneDrive/version10e6_small_BE_NL.txt"
burnin = 0.1,
maxsamples = -1,
as.mcmc = TRUE,
burninAsSamples = FALSE
)
log <- readLog("U:/BEAST_new_round/LogFiles_OneDrive/version10e6_small_BE_NL.txt",
burnin = 0.1,
maxsamples = -1,
as.mcmc = TRUE,
burninAsSamples = FALSE
)
install.packages("remotes")
remotes::install_github("laduplessis/beastio")
library("beastio")
install.packages("remotes")
log <- readLog("U:/BEAST_new_round/LogFiles_OneDrive/version10e6_small_BE_NL.txt",
burnin = 0.1,
maxsamples = -1,
as.mcmc = TRUE,
burninAsSamples = FALSE
)
install.packages("remotes")
library("beastio")
log <- readLog("U:/BEAST_new_round/LogFiles_OneDrive/version10e6_small_BE_NL.txt",
burnin = 0.1,
maxsamples = -1,
as.mcmc = TRUE,
burninAsSamples = FALSE
)
log <- readLog("U:/BEAST_new_round/LogFiles_OneDrive/version10e6_small_BE_NL.txt",
burnin = 0.1,
maxsamples = -1,
as.mcmc = TRUE,
burninAsSamples = FALSE
)
log <- readLog("U:/BEAST_new_round/LogFiles_OneDrive/version10e6_small_BE_NL",
burnin = 0.1,
maxsamples = -1,
as.mcmc = TRUE,
burninAsSamples = FALSE
)
236530.547/3600
pf(6.34, df = 5, df2 = 31, lower.tail = FALSE)
pf(26.13, df = 2, df2 = 31, lower.tail = FALSE)
library(readr)
zwempaarden <- read_csv("zwempaarden.csv")
View(zwempaarden)
fit <- glm(HR ~factor(talent)+factor(Trainer)),family=gaussian,data=zwempaarden
)
fit <- glm(HR ~factor(talent)+factor(Trainer),family=gaussian,data=zwempaarden)
summary(fit)
drop1(fit)
drop1(fit,test=F)
drop1(fit,test="F)
drop1(fit,test="F")
drop1(fit,test="F")
Anova(fit)
anova(fit)
?Anova
?ANOVA
aov(fit)
install.packages("car")
library(car)
Anova(fit)
Anova(fit,test.statistic = "F")
pf(15.83786921, df = 2, df2 = 31, lower.tail = FALSE)
pf(10.45, df = 5, df2 = 31, lower.tail = FALSE)
pf(4.2526, df = 5, df2 = 31, lower.tail = FALSE)
pf(0.3377, df = 2, df2 = 31, lower.tail = FALSE)
?Anova
Anova(fit,test.statistic = "F")
pf(0.3377, df = 2, df2 = 31, lower.tail = FALSE)
pf(0.3377, df = 2, df2 = 31, lower.tail = TRUE)
Anova(fit,test.statistic = c("Chi", "F"))
Anova(fit,test.statistic = c("Chisq", "F"))
Anova(fit,test.statistic ="F")
exp(2.95)
388914/(60*60)
388914/(60*60*24)
## Load all packages
lapply(c("phybreak", "coda", "gplots", "phytools", "igraph","seqinr"), require, character.only = TRUE)
# setwd("C:/Users/lager008/OneDrive - Universiteit Utrecht/Phylobreak")
setwd("C:/Users/lager008//Testrepo/")
genetic.data <- read.dna(file = "Syn_geneticData3.fasta" , format = "fasta")
distance<- dist.dna(genetic.data, model = "N", as.matrix = TRUE)
heatmap.2(distance, trace = "none", key.xlab = "Number of SNPs")
plot(density(distance))
################### Normal dataset with allignment in Rstudio
## Create a distance matrix with one sample per farm
## Make a graph object from the distance matrix
mygraph <- graph.adjacency(distance, weighted = TRUE)
## Compute and plot the minimum spanning tree
mstgraph <- as.undirected(minimum.spanning.tree(mygraph))
## Create a layout where nodes with more distance are further away from each other
layout <- layout_with_fr(mstgraph, weights=1/E(mstgraph)$weight)
plot(mstgraph,
layout = layout,
edge.label = edge_attr(mstgraph,"weight"),   # Add distance as edge label
edge.label.color = "black",                  # Color of edge labels
vertex.size = 2,                             # Size of the nodes
vertex.label.dist= 1,
vertex.label.cex = 1.5)                        # Add a little space between the node and its label
title(main = "Minimal spanning tree")
## Compute and plot the Neighbour joining tree
njtree <- nj(distance)
plot(njtree, type = "unrooted", use.edge.length = F)  # Plot without using a starting edge and no edge length for better overview
title(main = "Neighbour joining tree")
edgelabels(round(njtree$edge.length, 1), frame = "none") # Add distance as edge labels
##############
meta.data$date <- as.Date(seq(as.Date("2024-01-03"),as.Date("2024-12-05"),by=3)[1:100])
meta.data$place <- c(rep(as.character(c("Utrecht","Amsterdam","Groningen","Apeldoorn","Texel","Middelburg","Maastricht","Oss","Rheden","Hoorn")),10))
data.object <- phybreakdata(sequences = genetic.data,
sample.times = as.Date(meta.data$date),
host.names = meta.data$place)
MCMC_init <- phybreak(data.object)
MCMC_init2 <- phybreak(data.object, prior.sample.mean.mean = 10, prior.sample.mean.sd = 1)
# (not runnable as code in this notebook)
## Perform a burn-in of the MCMC
MCMC_state <- burnin_phybreak(MCMC_init, ncycles = 100)
## To run the MCMC chain with 10,000 cycles
## The `nchains = 3` argument tells the model to use 3 parallel chains, in order
## to find the most optimal state
MCMC_state <- sample_phybreak(MCMC_state, nsample = 100, nchains = 3)
##############
meta.data <- data.frame()
meta.data$date <- as.Date(seq(as.Date("2024-01-03"),as.Date("2024-12-05"),by=3)[1:100])
##############
meta.data <- data.frame(matrix(0,5,100))
meta.data$date <- as.Date(seq(as.Date("2024-01-03"),as.Date("2024-12-05"),by=3)[1:100])
meta.data$place <- c(rep(as.character(c("Utrecht","Amsterdam","Groningen","Apeldoorn","Texel","Middelburg","Maastricht","Oss","Rheden","Hoorn")),10))
##############
meta.data <- data.frame(matrix(0,100,5))
meta.data$date <- as.Date(seq(as.Date("2024-01-03"),as.Date("2024-12-05"),by=3)[1:100])
meta.data$place <- c(rep(as.character(c("Utrecht","Amsterdam","Groningen","Apeldoorn","Texel","Middelburg","Maastricht","Oss","Rheden","Hoorn")),10))
data.object <- phybreakdata(sequences = genetic.data,
sample.times = as.Date(meta.data$date),
host.names = meta.data$place)
MCMC_init <- phybreak(data.object)
MCMC_init2 <- phybreak(data.object, prior.sample.mean.mean = 10, prior.sample.mean.sd = 1)
## Perform a burn-in of the MCMC
MCMC_state <- burnin_phybreak(MCMC_init, ncycles = 100)
library(gengraph)
library(adegenet)
cluster <- function(data_dist,c.thres)
{
hist(data_dist[upper.tri(data_dist, diag = F)])
# install.packages("adegenet")
# install.packages("gengraph")
# gengraph(distance)
clusters <- gengraph(data_dist, cutoff = c.thres)
# plot(clusters)
clusters
clusters$graph
plot(clusters$graph)
names(clusters$clust$membership[clusters$clus$membership == 1])
names(clusters$clust$membership[clusters$clus$membership == 4])
## bigger clusters
clustering <- clusters$clust$csize
big.cluster <- which(clustering >=10 )
return(clusters)
}
clusterin.data <- function(cl.data,mem.number,seq.data)
{
id1 <- c(labels(cl.data$clust$membership[cl.data$clust$membership==mem.number]))
id2 <- match(id1,labels(seq.data))
sub.cluster <- seq.data[c(id2),]
return(sub.cluster)
}
cl.seq.NL <- cluster(distance,100)
cl.group <- clusterin.data(cl.seq,1,genetic.data)
cl.seq <- cluster(distance,100)
cl.group <- clusterin.data(cl.seq,1,genetic.data)
graph.adjacency
MCMC_state
cl.group
heatmap.2(distance, trace = "none", key.xlab = "Number of SNPs")
cl.seq <- cluster(distance,20)
cl.seq
cl.seq
cl.group
distance.subcluster <- dist.dna(cl.group, model = "N", as.matrix = TRUE)
## Make a graph object from the distance matrix
mygraph <- graph.adjacency(distance, weighted = TRUE)
## Make a graph object from the distance matrix
mygraph <- graph.adjacency(distance.subcluster, weighted = TRUE)
####### for subcluster  ######
mygraph.subcluster <- graph.adjacency(distance.subcluster, weighted = TRUE)
## Compute and plot the minimum spanning tree
mstgraph.subcluster <- as.undirected(minimum.spanning.tree(mygraph.subcluster))
####### For subcluster  ######
mygraph.subcluster <- graph.adjacency(distance.subcluster, weighted = TRUE)
## Compute and plot the minimum spanning tree
mstgraph.subcluster <- as.undirected(minimum.spanning.tree(mygraph.subcluster))
layout.sub<- layout_with_fr(mstgraph.subcluster, weights=1/E(mstgraph.subcluster)$weight)
plot(mstgraph.subcluster,
layout = layout.sub,
edge.label = edge_attr(mstgraph.subcluster,"weight"),   # Add distance as edge label
edge.label.color = "black",                  # Color of edge labels
vertex.size = 2,                             # Size of the nodes
vertex.label.dist= 1,
vertex.label.cex = 1.5)                        # Add a little space between the node and its label
title(main = "Minimal spanning tree")
plot(mstgraph,
layout = layout,
edge.label = edge_attr(mstgraph,"weight"),   # Add distance as edge label
edge.label.color = "black",                  # Color of edge labels
vertex.size = 2,                             # Size of the nodes
vertex.label.dist= 1,
vertex.label.cex = 1.5)                        # Add a little space between the node and its label
plot(mstgraph.subcluster,
layout = layout.sub,
edge.label = edge_attr(mstgraph.subcluster,"weight"),   # Add distance as edge label
edge.label.color = "black",                  # Color of edge labels
vertex.size = 2,                             # Size of the nodes
vertex.label.dist= 1,
vertex.label.cex = 1.5)                        # Add a little space between the node and its label
## Compute and plot the Neighbour joining tree
njtree <- nj(distance)
plot(njtree, type = "unrooted", use.edge.length = F)  # Plot without using a starting edge and no edge length for better overview
title(main = "Neighbour joining tree")
edgelabels(round(njtree$edge.length, 1), frame = "none") # Add distance as edge labels
##############
meta.data <- data.frame(matrix(0,100,5))
meta.data$date <- as.Date(seq(as.Date("2024-01-03"),as.Date("2024-12-05"),by=3)[1:100])
meta.data$place <- c(rep(as.character(c("Utrecht","Amsterdam","Groningen","Apeldoorn","Texel","Middelburg","Maastricht","Oss","Rheden","Hoorn")),10))
data.object <- phybreakdata(sequences = genetic.data,
sample.times = as.Date(meta.data$date),
host.names = meta.data$place)
MCMC_init <- phybreak(data.object)
MCMC_init2 <- phybreak(data.object, prior.sample.mean.mean = 10, prior.sample.mean.sd = 1)
## Perform a burn-in of the MCMC
MCMC_state <- burnin_phybreak(MCMC_init, ncycles = 100)
MCMC_state <- sample_phybreak(MCMC_state, nsample = 100, nchains = 3)
## To load the prerun MCMC chain provided as .rds file
# MCMC_state <- readRDS("mcmc_samples.rds")
print(MCMC_state)
mcmc <- get_mcmc(MCMC_state)
effectiveSize(mcmc)
plot(mcmc[,c("introductions")])
summary(mcmc[,c("mS")])
transtree(MCMC_state, method = "mpc")
## Show all infectors of Farm 8a, and their support
infectorsets(MCMC_state, which.hosts = "F8a")
plotTrans(MCMC_state, plot.which = "mpc", samplenr = 6)
## Plot the phylogenetic tree with maximum parent credibility
plotPhylo(MCMC_state, plot.which = "mpc", samplenr = 0)
plotPhyloTrans(MCMC_state, plot.which = "mpc")
## Select three colorblind friendly colors
colors <- c("#000000", "#E69F00", "#56B4E9")
## Color the farms (hosts) according to the genetic clusters.
host.color <- sapply(unique(data.object$sample.hosts), function(n){
cluster <- metadata$gen.cluster[metadata$farm == n][1]
if (cluster == "A") color <- colors[1]
else if (cluster == "B") color <- colors[2]
else if (cluster == "D") color <- colors[3]
return(color)
})
## Plot the transmission tree (the MPC tree) for which the labels are colored.
plotTrans(MCMC_state, plot.which = "mpc", label.col = host.color)
## Show all infectors of Farm 8a, and their support
infectorsets(MCMC_state, which.hosts = "Utrecht")
plotTrans(MCMC_state, plot.which = "mpc", samplenr = 6)
plotPhyloTrans(MCMC_state, plot.which = "mpc")
## Select three colorblind friendly colors
colors <- c("#000000", "#E69F00", "#56B4E9")
## Plot the transmission tree (the MPC tree) for which the labels are colored.
plotTrans(MCMC_state, plot.which = "mpc", label.col = host.color)
## Plot the phylogenetic tree with maximum parent credibility
plotPhylo(MCMC_state, plot.which = "mpc", samplenr = 0)
plotPhyloTrans(MCMC_state, plot.which = "mpc")
